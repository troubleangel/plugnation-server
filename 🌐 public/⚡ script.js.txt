// API Base URL - Change this when you deploy
const API_BASE_URL = window.location.origin;

// DOM Elements
let currentData = {};

// Initialize Dashboard
document.addEventListener('DOMContentLoaded', function() {
    initializeDashboard();
    startLiveClock();
    loadDashboardData();
    setupEventListeners();
});

// Initialize all dashboard components
function initializeDashboard() {
    console.log('ðŸš€ PLUGNATION STUDIOS Dashboard Initialized');
}

// Live Clock
function startLiveClock() {
    function updateClock() {
        const now = new Date();
        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const day = days[now.getDay()];
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        
        document.getElementById('live-clock').textContent = 
            `${day} ${hours}:${minutes}:${seconds}`;
    }
    
    updateClock();
    setInterval(updateClock, 1000);
}

// Load Dashboard Data from API
async function loadDashboardData() {
    try {
        const response = await fetch(`${API_BASE_URL}/api/dashboard`);
        const data = await response.json();
        currentData = data;
        
        updateClientsDisplay(data.clients);
        updateAnalyticsDisplay(data.analytics);
        updateNotificationsDisplay(data.notifications);
        generateChart(data.analytics.chartData);
        
    } catch (error) {
        console.error('Error loading dashboard data:', error);
        showError('Failed to load dashboard data');
    }
}

// Update Clients Display
function updateClientsDisplay(clients) {
    const container = document.getElementById('clients-container');
    
    if (clients.length === 0) {
        container.innerHTML = '<div class="client-card">No clients found</div>';
        return;
    }
    
    container.innerHTML = clients.map(client => `
        <div class="client-card" onclick="editClient(${client.id})">
            <div class="client-name">${client.name}</div>
            <div class="client-tier">Tier: ${client.tier}</div>
            <div class="client-joined">Joined: ${client.joined}</div>
        </div>
    `).join('');
}

// Update Analytics Display
function updateAnalyticsDisplay(analytics) {
    document.getElementById('visits-count').textContent = analytics.visits;
    document.getElementById('pending-count').textContent = analytics.pending;
    document.getElementById('new-clients-count').textContent = analytics.newClients;
    document.getElementById('payments-count').textContent = analytics.payments;
}

// Update Notifications Display
function updateNotificationsDisplay(notifications) {
    const container = document.getElementById('notifications-container');
    
    container.innerHTML = notifications.map(notification => `
        <div class="notification" onclick="handleNotification(${notification.id})">
            <div class="notification-icon icon-${notification.type}">
                <i class="fas ${
                    notification.type === 'premium' ? 'fa-crown' :
                    notification.type === 'free' ? 'fa-user-plus' : 'fa-money-bill-wave'
                }"></i>
            </div>
            <div class="notification-content">
                <h4>${notification.title}</h4>
                <p>${notification.time}</p>
            </div>
        </div>
    `).join('');
}

// Generate Chart
function generateChart(chartData) {
    const container = document.getElementById('chart-container');
    const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
    
    container.innerHTML = chartData.map((value, index) => `
        <div class="chart-bar" style="height: ${value}%">
            <div class="chart-label">${days[index]}</div>
        </div>
    `).join('');
}

// Add Client Functions
function showAddClientForm() {
    document.getElementById('add-client-modal').style.display = 'block';
}

function closeAddClientForm() {
    document.getElementById('add-client-modal').style.display = 'none';
    document.getElementById('add-client-form').reset();
}

// Handle Add Client Form Submission
document.getElementById('add-client-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const name = document.getElementById('client-name').value;
    const tier = document.getElementById('client-tier').value;
    
    try {
        const response = await fetch(`${API_BASE_URL}/api/clients`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name, tier })
        });
        
        if (response.ok) {
            const newClient = await response.json();
            closeAddClientForm();
            loadDashboardData(); // Reload data
            showSuccess(`Client ${name} added successfully!`);
        } else {
            throw new Error('Failed to add client');
        }
    } catch (error) {
        console.error('Error adding client:', error);
        showError('Failed to add client');
    }
});

// Edit Client
function editClient(clientId) {
    const client = currentData.clients.find(c => c.id === clientId);
    if (client) {
        const newTier = client.tier === 'Premium' ? 'Free' : 'Premium';
        
        if (confirm(`Change ${client.name} to ${newTier} tier?`)) {
            updateClientTier(clientId, newTier);
        }
    }
}

// Update Client Tier
async function updateClientTier(clientId, newTier) {
    try {
        const response = await fetch(`${API_BASE_URL}/api/clients/${clientId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ tier: newTier })
        });
        
        if (response.ok) {
            loadDashboardData(); // Reload data
            showSuccess(`Client tier updated to ${newTier}!`);
        } else {
            throw new Error('Failed to update client');
        }
    } catch (error) {
        console.error('Error updating client:', error);
        showError('Failed to update client');
    }
}

// Handle Notification Click
function handleNotification(notificationId) {
    // Implement notification handling logic
    console.log('Notification clicked:', notificationId);
    showSuccess('Notification handled');
}

// Utility Functions
function showError(message) {
    // Simple error notification
    alert('Error: ' + message);
}

function showSuccess(message) {
    // Simple success notification
    alert('Success: ' + message);
}

// Setup Event Listeners
function setupEventListeners() {
    // Navigation
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
            if (this.getAttribute('href') === '#') {
                e.preventDefault();
                const page = this.getAttribute('data-page');
                switchPage(page);
            }
        });
    });
    
    // Chart period buttons
    document.querySelectorAll('.chart-action').forEach(button => {
        button.addEventListener('click', function() {
            document.querySelectorAll('.chart-action').forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            // In a real app, you'd load different data here
        });
    });
}

function switchPage(page) {
    // Update active nav link
    document.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active'));
    event.target.classList.add('active');
    
    // Update page title
    const titles = {
        'dashboard': 'Claim Your Throne',
        'analytics': 'Business Analytics',
        'notifications': 'System Notifications'
    };
    
    document.getElementById('page-title').textContent = titles[page] || 'PLUGNATION STUDIOS';
}